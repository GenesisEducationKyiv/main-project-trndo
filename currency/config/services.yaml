# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    env: '%env(resolve:APP_ENV)%'
    coin_gate_host: '%env(resolve:COIN_GATE_HOST)%'
    coin_gecko_host: '%env(resolve:COIN_GECKO_HOST)%'
    crypto_compare_host: '%env(resolve:CRYPTO_COMPARE_HOST)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    App\Presentation\Controller\:
        resource: '../src/Presentation/Controller'
        tags: [ 'controller.service_arguments' ]

    App\Repository\Subscription\Command\SubscriptionCommandRepositoryInterface:
        class: App\Repository\Subscription\Command\TxtSubscriptionCommandRepository
        arguments:
            - "%kernel.project_dir%/system"

    App\Repository\Subscription\Query\SubscriptionQueryRepositoryInterface:
        class: App\Repository\Subscription\Query\TxtSubscriptionQueryRepository
        arguments:
            - "%kernel.project_dir%/system"

    App\Utils\CurrencyRateComparator\Chain\CoinGateCurrencyRateComparatorHandler:
        calls:
            - setNext: ['@App\Utils\CurrencyRateComparator\Chain\CoinGeckoCurrencyRateComparatorHandler']

    App\Utils\CurrencyRateComparator\Chain\CoinGeckoCurrencyRateComparatorHandler:
        calls:
            - setNext: [ '@App\Utils\CurrencyRateComparator\Chain\CryptoCompareCurrencyRateComparatorHandler' ]

    App\Utils\CurrencyRateComparator\CurrencyRateComparatorChainInterface: '@App\Utils\CurrencyRateComparator\Chain\CoinGateCurrencyRateComparatorHandler'

    App\Utils\CurrencyRateComparator\Comparator\Decorator\LoggerResponseCoinGateComparatorDecorator:
        decorates: App\Utils\CurrencyRateComparator\Comparator\CoinGateCurrencyRateComparator
        arguments:
            - '@monolog.logger.currency_provider_response'
            - '@.inner'

    App\Utils\CurrencyRateComparator\Comparator\Decorator\LoggerResponseCoinGeckoComparatorDecorator:
        decorates: App\Utils\CurrencyRateComparator\Comparator\CoinGeckoCurrencyRateComparator
        arguments:
            - '@monolog.logger.currency_provider_response'
            - '@.inner'

    App\Utils\CurrencyRateComparator\Comparator\Decorator\LoggerResponseCryptoCompareComparatorDecorator:
        decorates: App\Utils\CurrencyRateComparator\Comparator\CryptoCompareCurrencyRateComparator
        arguments:
            - '@monolog.logger.currency_provider_response'
            - '@.inner'